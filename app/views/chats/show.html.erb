<div class="container py-4" style="max-width: 700px;">
  <!-- En-tête du chat -->
  <div class="d-flex align-items-center mb-4 border-bottom pb-3">
    <% if @other_user.avatar.attached? %>
      <%= image_tag url_for(@other_user.avatar), class: "rounded-circle me-3", alt: "Profil", style: "width: 50px; height: 50px; object-fit: cover;" %>
    <% else %>
      <%= image_tag "default_avatar.jpg", class: "rounded-circle me-3", width: 50, height: 50, alt: "Profil" %>
    <% end %>
    <div>
      <h5 class="mb-0"><%= @other_user.nom.presence || @other_user.email %></h5>
      <small class="text-muted">En ligne</small> <!-- À adapter si besoin -->
    </div>
  </div>

  <!-- Boîte de discussion -->
  <div id="chat-box" class="border rounded p-3 mb-3" style="height: 400px; overflow-y: auto; background: #f9f9f9;" data-exchange-id="<%= @exchange.id %>">
    <% @messages.each do |message| %>
      <% is_current_user = (message.user == current_user) %>
      <% sender = message.user %>
      <div class="d-flex mb-3 <%= is_current_user ? 'justify-content-end' : 'justify-content-start' %>">
        <% unless is_current_user %>
          <% if sender.avatar.attached? %>
            <%= image_tag url_for(sender.avatar), class: "rounded-circle me-2", alt: "Profil", style: "width: 40px; height: 40px; object-fit: cover;" %>
          <% else %>
            <%= image_tag "default_avatar.jpg", class: "rounded-circle me-2", width: 40, height: 40, alt: "Profil" %>
          <% end %>
        <% end %>

        <!-- Bulle de message -->
        <div class="message-bubble px-3 py-2 rounded <%= is_current_user ? 'bg-primary text-white' : 'bg-light text-dark' %>" style="max-width: 70%;">
          <p class="mb-1" style="white-space: pre-wrap;"><%= message.content %></p>
          <small class="text-muted"><%= message.user.nom.presence || message.user.email %></small>
          <% if is_current_user %>
            <small class="ms-2 text-muted" style="font-size: 0.75rem;">
              <%= message.read ? "✔ Vu" : "✔ Envoyé" %>
            </small>
          <% end %>
        </div>
        <% if is_current_user %>
          <% if message.user.avatar.attached? %>
            <%= image_tag url_for(message.user.avatar.variant(resize_to_limit: [40, 40])), class: "rounded-circle ms-2", alt: "Profil" %>
          <% else %>
            <%= image_tag "default_avatar.jpg", class: "rounded-circle ms-2", width: 40, height: 40, alt: "Profil" %>
          <% end %>
        <% end %>
      </div>
    <% end %>
  </div>

  <!-- Formulaire d'envoi -->
  <%= form_with model: [@exchange, @chat, @message], local: true, data: { turbo: false }, id: "message-form" do |form| %>
    <div class="input-group">
      <%= form.text_area :content, class: "form-control", rows: 2, placeholder: "Écris ton message..." %>
      <button class="btn btn-primary" type="submit">Envoyer</button>
    </div>
  <% end %>
</div>

<script>
const chatBox = document.getElementById("chat-box");
const exchangeId = chatBox ? chatBox.dataset.exchangeId : null;

function scrollToBottom() {
  setTimeout(() => {
    if (chatBox) {
      chatBox.scrollTo({ top: chatBox.scrollHeight, behavior: "smooth" });
    }
  }, 300);
}

function updateChat() {
  if (!exchangeId) {
    console.error("Erreur : Exchange ID non trouvé !");
    return;
  }

  fetch(`/exchanges/${exchangeId}/chat/messages`)
    .then(response => response.text())
    .then(data => {
      if (chatBox) {
        const previousScrollHeight = chatBox.scrollHeight;
        chatBox.innerHTML = data;

        if (chatBox.scrollTop + chatBox.clientHeight >= previousScrollHeight - 10) {
          scrollToBottom();
        }
      }
    })
    .catch(error => console.error("Erreur dans le chat :", error));
}

// Marquer les messages comme "Vu" lorsqu'ils sont survolés
document.addEventListener("DOMContentLoaded", () => {
  document.querySelectorAll(".message-bubble").forEach((message) => {
    message.addEventListener("mouseenter", () => {
      const messageId = message.dataset.messageId;
      fetch(`/messages/${messageId}/read`, { method: "PATCH" });
    });
  });

  const form = document.getElementById("message-form");
  if (form) {
    form.addEventListener("submit", (event) => {
      event.preventDefault();
      const formData = new FormData(form);

      fetch(form.action, {
        method: "POST",
        body: formData,
        headers: { "X-Requested-With": "XMLHttpRequest" }
      })
      .then(response => response.text())
      .then(() => {
        form.reset();
        updateChat();
        scrollToBottom();
      })
      .catch(error => console.error("Erreur envoi message :", error));
    });
  }
});

setInterval(updateChat, 2000);
document.addEventListener("DOMContentLoaded", scrollToBottom);
</script>

<style>
  .message-bubble {
    word-wrap: break-word;
  }
</style>
